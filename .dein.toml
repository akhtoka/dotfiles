[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'gosukiwi/vim-atom-dark'

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
  let g:jedi#force_py_version = 3
  
  " 勝手にキーバインド設定やら自動補完などをやるので潰しておく
  let g:jedi#auto_initialization = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#completions_enabled = 0
  " コード参照のキーバインドを登録
  let g:jedi#goto_command = "<Leader>d"
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  " モードの表示名を定義(デフォルトだと長くて横幅を圧迫するので略称にしている)
  let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ }

  " パワーラインでかっこよく
  let g:airline_powerline_fonts = 1
  " カラーテーマ指定してかっこよく
  let g:airline_theme = 'luna'
  " タブバーをかっこよく
  let g:airline#extensions#tabline#enabled = 1

  " 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])

  " virtulenvを認識しているか確認用に、現在activateされているvirtualenvを表示(vim-virtualenvの拡張)
  let g:airline#extensions#virtualenv#enabled = 1

  " gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
  let g:airline#extensions#hunks#enabled = 0

  " Lintツールによるエラー、警告を表示(ALEの拡張)
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#error_symbol = 'E:'
  let g:airline#extensions#ale#warning_symbol = 'W:'

'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
  let NERDTreeIgnore = ['\.pyc$']
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nmap [figitive] <Nop>
  map <Leader>g [figitive]
  nmap <silent> [figitive]s :<C-u>Gstatus<CR>
  nmap <silent> [figitive]d :<C-u>Gdiff<CR>
  nmap <silent> [figitive]b :<C-u>Gblame<CR>
  nmap <silent> [figitive]l :<C-u>Glog<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = ''''
  " vimprocで非同期実行
  " 成功時にバッファ、失敗時にQuickFixで表示
  " 結果表示のサイズ調整など
  let g:quickrun_config = {
      \ '_' : {
          \ 'runner' : 'vimproc',
          \ 'runner/vimproc/updatetime' : 40,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/split' : ':botright 8sp',
      \ }
  \}

  " 実行時に前回の表示内容をクローズ&保存してから実行
  let g:quickrun_no_default_key_mappings = 1
  nmap <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " エラー行に表示するマーク
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'

  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " flake8をLinterとして登録
  let g:ale_linters = {
  \   'python': ['flake8', 'pylint'],
  \}

  " 各ツールをFixerとして登録
  let g:ale_fixers = {
  \ 'python': ['autopep8', 'black', 'isort'],
  \ }

  " ALE用プレフィックス
  nmap [ale] <Nop>
  map <C-k> [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
hook_add = '''
  let g:python_pep8_indent_hang_closing = 1
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " Denite用プレフィックス
  nmap [denite] <Nop>
  map <C-j> [denite]

  " プロジェクト内のファイル検索
  nmap <silent> [denite]<C-P> :<C-u>Denite file_rec -highlight-mode-insert=Search<CR>
  " バッファに展開中のファイル検索
  nmap <silent> [denite]<C-B> :<C-u>Denite buffer -highlight-mode-insert=Search<CR>
  " ファイル内の関数/クラス等の検索
  nmap <silent> [denite]<C-O> :<C-u>Denite outline -highlight-mode-insert=Search<CR>
  " dotfiles配下をカレントにしてfile_rec起動
  nmap <silent> [denite]<C-V> :<C-u>call denite#start([{'name': 'file_rec', 'args': ['~/.dotfiles']}]) -highlight-mode-insert=Search=Search<CR>

  " 上下移動を<C-N>, <C-P>
  call denite#custom#map('normal', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('normal', '<C-P>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-N>', '<denite:move_to_next_line>')
  call denite#custom#map('insert', '<C-P>', '<denite:move_to_previous_line>')
  " 入力履歴移動を<C-J>, <C-K>
  call denite#custom#map('insert', '<C-J>', '<denite:assign_next_text>')
  call denite#custom#map('insert', '<C-K>', '<denite:assign_previous_text>')
  " 横割りオープンを`<C-S>`
  call denite#custom#map('insert', '<C-S>', '<denite:do_action:split>')
  " 縦割りオープンを`<C-I>`
  call denite#custom#map('insert', '<C-I>', '<denite:do_action:vsplit>')
  " タブオープンを`<C-O>`
  call denite#custom#map('insert', '<C-O>', '<denite:do_action:tabopen>')

  " file_rec検索時にfuzzymatchを有効にし、検索対象から指定のファイルを除外
  call denite#custom#source(
      \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])

  " 検索対象外のファイル指定
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [ '.git/', '.ropeproject/', '__pycache__/',
      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
  let g:editorconfig#end_of_line = 'lf'
  let g:editorconfig#insert_final_newline = 'true'
'''

[[plugins]]
repo = 'hashivim/vim-terraform'
hook_add = '''
  let g:terraform_fmt_on_save = 0
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  let g:lsp_settings_servers_dir = '~/.local/share/nvim/vim-lsp-settings/servers'
'''

[[plugins]]
repo = 'bpearson/vim-phpcs'
hook_add = '''
  let g:ale_php_phpcs_standard = 'PSR2'
'''
